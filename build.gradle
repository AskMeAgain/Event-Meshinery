plugins {
    id 'java-library'
    id 'org.barfuin.gradle.jacocolog' version "${jacoco_log_version}"
    id 'com.vanniktech.maven.publish.base' version "${maven_publish_vanniktech_version}"
    id "com.github.blueboxware.tocme" version "1.3"
}

subprojects {
    apply from: "${rootDir}/gradle/subprojects.gradle"
    apply from: "${rootDir}/gradle/publish.gradle"
}

allprojects {
    repositories {
        mavenCentral()
        maven {
            url 'https://s01.oss.sonatype.org/content/repositories/staging/'
        }
    }

    test {
        useJUnitPlatform()
        outputs.upToDateWhen { false }
    }

    dependencies {
        implementation "org.slf4j:slf4j-api"

        api platform("com.google.cloud:libraries-bom:${google_cloud_bom_version}")

        implementation platform("org.testcontainers:testcontainers-bom:${testcontainers_version}")

        implementation platform("org.springframework.boot:spring-boot-dependencies:${spring_boot_version}")
        testImplementation platform("org.springframework.boot:spring-boot-dependencies:${spring_boot_version}")
        annotationProcessor platform("org.springframework.boot:spring-boot-dependencies:${spring_boot_version}")
        testAnnotationProcessor platform("org.springframework.boot:spring-boot-dependencies:${spring_boot_version}")

        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    }
}

tocme {
    doc(file("README.md"))
    numbered false
    bold false
    style Hierarchy
    variant GitHub
    levels '1-4'
}

if (gradle.startParameter.taskNames.contains('publishMavenPublicationToMavenCentralRepository')) {
    rootProject.extensions.add("release-version", System.getenv("RELEASE_VERSION"))
} else if (gradle.startParameter.taskNames.contains('publishToMavenLocal')) {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()

    rootProject.extensions.add("release-version", "${branch}-SNAPSHOT")
} else {
    rootProject.extensions.add("release-version", "Default-SNAPSHOT")
}